
●各テーブルの統計情報のサンプリング(ハッシュベースサンプリングで全部の行の統計とらんくてもOK)
select DBMS_STATS.GET_PREFS(pname => 'ESTIMATE_PERCENT', ownname => 'TRY', tabname => 'TBL1') from DUAL;

●統計情報が最後に取得された時間を獲得
select TABLE_NAME, NUM_ROWS, BLOCKS, AVG_ROW_LEN, 
to_char(LAST_ANALYZED, 'YYYY/MM/DD HH24:MI:SS') from USER_TABLES ;

●ユーザの更新履歴を確認
select TABLE_NAME, INSERTS, UPDATES, DELETES, TRUNCATED from USER_TAB_MODIFICATIONS ;


●統計情報の見方
################################################################################
Execution Plan
----------------------------------------------------------
Plan hash value: 1691624101

------------------------------------------------------------------------------
| Id  | Operation         | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |          |     1 |    20 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS FULL| TEMP_EMP |     1 |    20 |     2   (0)| 00:00:01 |
------------------------------------------------------------------------------

　★TimeはCBOにより算出された時間で実際の実行時間ではない。
  ★、Id=1のOperationは一段落下がっていますが、実行計画は段落が深いオペレーションから実施されるため以下の例は1→0の順番に実行されることになります。


################################################################################
Execution Plan
----------------------------------------------------------
Plan hash value: 583550043

----------------------------------------------------------------------------------
| Id  | Operation         | Name         | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |              |     1 |    13 |     3   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE   |              |     1 |    13 |            |          |
|*  2 |   INDEX RANGE SCAN| PK_TBL2_COL1 |     1 |    13 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("COL1"=30000)

　★条件評価は「access」であるため索引を利用して条件に一致する索引ブロックを無駄なブロックアクセスなく読み込んでいる(索引ブランチからたどり、col1=1のデータが入っているリーフブロックのみ読み込んでいる)
・条件評価は「filter」であるためいったん表ブロックを読み込んだ後、条件に該当する行があるかどうか判断し、 条件に合致しない行であれば切り捨てて(フィルタして)いる(=該当の条件に一致しない無駄なブロックも読み込んでいる可能性がある)


################################################################################
select count(*) from aaa;

実行計画
----------------------------------------------------------
Plan hash value: 1020877103

------------------------------------------------------------------------
| Id  | Operation             | Name   | Rows  | Cost (%CPU)| Time     |
------------------------------------------------------------------------
|   0 | SELECT STATEMENT      |        |     1 |     7   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE       |        |     1 |            |          |
|   2 |   INDEX FAST FULL SCAN| PK_AAA | 10000 |     7   (0)| 00:00:01 |
------------------------------------------------------------------------

　★「SORT AGGREGATE」はSUM()やCOUNT()等の集計関数で集計する際に選択されるオペレーション.件数の集計をかけるため行数は1行


################################################################################
select count(*) from aaa where col1 > 9500 and col2 > 9900;

実行計画
----------------------------------------------------------
Plan hash value: 518189053

---------------------------------------------------------------------------------------
| Id  | Operation                    | Name   | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |        |     1 |     8 |     3   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE              |        |     1 |     8 |            |          |
|*  2 |   TABLE ACCESS BY INDEX ROWID| AAA    |     5 |    40 |     3   (0)| 00:00:01 |
|*  3 |    INDEX RANGE SCAN          | PK_AAA |   500 |       |     2   (0)| 00:00:01 |

  ★1~10000までのデータを含むため、500件分のデータのレンジ検索がされている。
    ただし、実際は予測として出た500件がすべて正しいとは限らない。


