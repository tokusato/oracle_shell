●インデクスの貼られた列に関数を利用すると、インデクスが有効でなくなる。
NG: WHERE  TO_CHAR(indexcolumn, 'YYYYMMDD') = '19890330'
OK: WHERE  indexcolumn = TO_DATE('19890330' , 'YYYYMMDD')

●暗黙の型変換
暗黙の型変換も性能劣化するため、DDLで定義した列のデータ型を指定したSQL文を作成する。

●in句
IN 述語の引数リストには、最もありそうなキーを左寄せする
遅い(かもしれない)
SELECT * FROM Address WHERE prefecture IN ('鳥', '徳', '東', '大');
速い(かもしれない)
SELECT * FROM Address WHERE prefecture IN ('東', '大', '鳥', '徳'); 

●ヒント句
どうしてもオプティマイザが言う事を聞いてくれない！！という時はヒント句を使うと解決する事が多いです。ヒント句を指定する事により実行計画をある程度操作する事ができます。
・特に有用なヒント句
実行計画が大幅に狂う時は結合順、結合方法が間違っているときが多いのでそれを下記ヒント句でただすことができます。
LEADINGヒント
SELECT /* LEADING(e j) */ * FROM employees e, departments d, job_history j WHERE e.department_id = d.department_id AND e.hire_date = j.start_date; 

●不可視インデックス
オプティマイザから見えないようにする事が出来る。
ある特定のSQLだけはこのindexを使いたいが他のSQLには影響を与えないようにという時に使える。

●ヒストグラム
表のデータ偏りを確認し、テーブルスキャンとインデクススキャンのいずれが良い検索方法かチェックする。
selectivity : 条件を適用したときの選択され具合
cardinality : 全行数/selectivity

⇒カーディナリティが高いほうがインデクススキャンが適した検索方法になる。

●バインド変数利用時のセェクティビティ
・バインドピーク機能の有無で変わる。(バインド変数内の値を先読みする。)

　バインドピーク機能有の場合
　SQLの解析(ハードパース)字にセットされた値で算出
　
　バインドピーク機能無の場合
    条件が等価条件の場合
　　　個別値数(NDV)の値で全行数を割る。⇒つまり均等にデータが入っているとみなされる。
　　条件が非等価条件の場合
      0.05の固定値がセレクティビティに指定される。

●union より union all
重複行を排除するためのソートが発生するので、重複を許すならunion all

SQL> select count(id) from test where id > 150;

Elapsed: 00:00:00.06

Execution Plan
----------------------------------------------------------
Plan hash value: 1950795681

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |     1 |    13 |     3   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE    |      |     1 |    13 |            |          |
|*  2 |   TABLE ACCESS FULL| TEST |    50 |   650 |     3   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("ID">150)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)


Statistics
----------------------------------------------------------
         52  recursive calls
          7  db block gets
         64  consistent gets
          2  physical reads
       1008  redo size
        543  bytes sent via SQL*Net to client
        607  bytes received via SQL*Net from client
          2  SQL*Net roundtrips to/from client
          2  sorts (memory)
          0  sorts (disk)
          1  rows processed




物理読み込みブロック数 = physical reads
それは読み込み元（ディスク or バッファ・キャッシュ）を問わず読み込んだ全ブロック数（論理読み込みブロック数 = consistent gets）
