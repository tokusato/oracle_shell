#1
10 表領域をオフラインにする。
alter tablespace users offline;

12 ORACLE_SID値をわたし、ORACLE_HOMEとPATH LD_LIBRARY_PATH環境変数を設定する。
(LD_LIBRARY_PATH ディレクトリを一時的に共有ライブラリ検索パスに追加) 
. oraev 
⇒+ASMというORACLE_SIDを指定すればASMが構成されることが分かる。

12 Oracle高可用性サービスの自動起動を確認する。(ただし、このコマンドはgridのコマンド)
 crsctl config has

13  
select count(*) from v$asm_diskgroup;
⇒TYPEの値からディスクのミラー具合が分かる。
  NORMAL=>通常の2方向の冗長化、HIGH=>3方向の冗長化、EXTERN⇒冗長化なし。
  NORMALなら、FREE_MB列に記載の未使用領域の半分を利用することができる。


#3 dbinstance
22 SPファイル(初期化パラメタファイル)の格納先を調査
show parameter spfile
⇒/u01/app/oracle/product/12.2/db_1/dbs/spfileorcl12c.ora

SPFILEはインスタンス起動後に再作成できないし、STARTUPコマンドのファイルとして明確に指定できない。
PFILEは可能

#4
LREGプロセスによってリスナーに情報登録することを動的サービス登録。
以下初期化パラメタが正しく設定されている必要あり。
G[oracle@localhost oracle_shell]$ ./connectOracle.sh
show parameter service

NAME                                 TYPE                 VALUE
------------------------------------ -------------------- ------------------------------
service_names                        string               orcl12c
show parameter instance

NAME                                 TYPE                 VALUE
------------------------------------ -------------------- ------------------------------
active_instance_count                integer
cluster_database_instances           integer              1
instance_abort_delay_time            integer              0
instance_groups                      string
instance_mode                        string               READ-WRITE
instance_name                        string               orcl12c
instance_number                      integer              0
instance_type                        string               RDBMS
open_links_per_instance              integer              4
parallel_instance_group              string
show parameter local_listener

NAME                                 TYPE                 VALUE
------------------------------------ -------------------- ------------------------------
local_listener                       string               LISTENER_ORCL12C
show parameter remote_listener

NAME                                 TYPE                 VALUE
------------------------------------ -------------------- ------------------------------
remote_listener                      string

84 listener.oraファイルの再読み込み
lsnrctl reload

39
共有サーバ接続でできないのは、起動や停止などの管理と、RMANを用いたバックアップとリカバリ


p108 データベースリンクを作成する。connect toにcurrent_userを指定すると現行ユーザのDBリンクを作成することができる。public database linkならみんながアクセスできる。
SQL> create database link remote connect to toku identified by tokusato0630 using 'orcl12c';

Database link REMOTE created.

Elapsed: 00:00:01.557
SQL> show user
USER is "TRY"

QL> select * from link_test@remote;
no rows selected
Elapsed: 00:00:01.413

SQL> select * from link_test;no rows selected
Elapsed: 00:00:00.016

⇒ローカルのものも検索できている。


90
ローカルネーミングでは、、クライアントごとにローカル構成ファイル(tnsnames.ora)を
用意する必要がある。つまり、そのファイルの中には、オラクルインスタンスの存在するホストの名前が記載されている。(もしかしたら、そのホストのリスナーの情報も？)
ローカルネーミングするためには、OracleNetもインストールされている必要あり。
クライアント側のsqlnet.oraファイルにtnsnamesが含まれていることを確認する必要あり。
tnsnames.oraファイルにSERVER=DEDICATEDがあれば、専用接続モードで接続する。


(※)フェールオーバやロードバランスの考え方があるのは、listener.oraのファイルのほう。

・共有サーバ接続時は、リスナーを経由してディスパッチャが選択され、最終的には、ディスパッチャと接続する。
  要求キューは、インスタンス毎に一つ。応答キューはディスパッチャごとに用意されている。これらは、すべてSGA内に用意されている。

#5 セキュリティ

プロファイル作成
create profile strict_login limit failed_login_attempts 3 ;
作ったプロファイルをもとにユーザを作成
create user strict_login_user identified by oracle profile strict_login;

アカウントがロックされたら、以下のコマンドでアカウントロックを解除。
(アカウントがロックされてもそのユーザがもつスキーマオブジェクトは利用可能なまま)
alter user strict_login_user account unlock;

SQL> drop profile strict_login;
ORA-02382: profile STRICT_LOGIN has users assigned, cannot drop without CASCADE
⇒誰かが使っているプロファイルの場合は、CASCADEオプションをつけて削除する必要がある。

権限分析
BEGIN
 DBMS_PRIVILEGE_CAPTURE.CREATE_CAPTURE(
  name          => 'capture',
  description   => 'Captures',
  type          => DBMS_PRIVILEGE_CAPTURE.G_DATABASE);
END;
/
EXEC DBMS_PRIVILEGE_CAPTURE.ENABLE_CAPTURE ('capture');
⇒PL/SQL procedure successfully completed.と出ているが、結果はどこに格納されている？


CREATE PROFILE sevear_limit LIMIT 
   SESSIONS_PER_USER          10
   CPU_PER_SESSION            2 
   CPU_PER_CALL               300 
   CONNECT_TIME               45 
   LOGICAL_READS_PER_SESSION  DEFAULT 
   LOGICAL_READS_PER_CALL     1000 
   PRIVATE_SGA                15K;


#6

58 データファイルに関する情報を表示するSQL
select file_id, TABLESPACE_NAME, BYTES, BLOCKS, STATUS, USER_BYTES, USER_BLOCKS, ONLINE_STATUS,  file_name from dba_data_files;

59 データファイルにエクステントを割り当てる
SQL> create table TRY."block_test" (id number);

SQL> alter table TRY."block_test"  allocate extent(size 300M);
ORA-01536: space quota exceeded for tablespace 'USERS'

SQL> alter table TRY."block_test"  allocate extent(size 1M);
Table TRY."block_test" altered.


60 OMF DB内のファイルを直接管理する必要をなくすための機能
サイズを指定しないと、100Mの自動拡張有効なデータファイルが作成される。
●データファイルが自動的に作成される箇所
/u01/app/oracle/oradata/orcl12c/

SQL> show parameter db_create
NAME                        TYPE   VALUE
--------------------------- ------ -----
db_create_file_dest         string       ⇒OMFのデータファイルが作成される箇所
db_create_online_log_dest_1 string       ⇒OMFの制御ファイルとREDOログが作成される箇所
db_create_online_log_dest_2 string
db_create_online_log_dest_3 string
db_create_online_log_dest_4 string
db_create_online_log_dest_5 string

ASMでは内部的にOMFファイルが自動的に利用されている。

●作り方
alter system set db_create_file_dest = '/u01/app/oracle/oradata/orcl12c/';
create tablespace ts02 datafile size 30M;
●確認方法
select file_name, bytes, autoextensible from dba_data_files where tablespace_name in ('TS02');

⇒/u01/app/oracle/oradata/orcl12c/ORCL12C/51C99766D7E2568DE0530100007F4FAE/datafile/o1_mf_ts02_f4ksx4w
orcl12cの直下ではなかった。

(※)
OMFのファイルはDBから消すと、物理ファイルごとなくなるが、非OMFファイルはDBから消しても物理ファイルが残ったままになっている。(ただし、INCLUDING CONTENTS AND DATAFILES を指定すれば消える)
中身の入った表領域を削除する場合には、drop tablespace ~ including contents文を実行する。


#7
表領域中の表のセグメントの縮小
Step1 表領域作成
自動セグメント領域管理
create tablespace test1 datafile '/u01/app/oracle/oradata/orcl12c/test01.dbf' size 5M;
空きリスト領域管理⇒これは表の圧縮できない。
create tablespace test2 datafile '/u01/app/oracle/oradata/orcl12c/test02.dbf' size 5M segment space management manual;

Step2 テーブル作成
create table t1 (id number) tablespace test1;
create table t2 (id number) tablespace test2;

Step3 行移動の有効化(表単位の設定)
alter table t1 enable row movement;

Step4 表のセグメントの縮小
alter table t1 shrink space ;
alter table t2 shrink space ;

(*)SHRINK SPACE COMPACT句は圧縮のみを実行。解放はしないが、これは、オンライン中に実行することが可能。


●オンラインテーブル移動
alter table xxx moce; では、実行するために、元のセグメントの2倍の領域が必要。moveでも最初はコピーして後から消すから。
しかも移動している最中は、DMLを受け付けることができない。⇒オンライン中にやるのは、よくない。
しかも索引のROWIDは変更されないため、再構築要。
ただし、HWMを下げることが可能。行移行や行遷移を解消することが可能。
⇒ALTER TABLE SHRINKとのコンボで使えばいいのではないか？


select INDEX_NAME,INDEX_TYPE,TABLE_OWNER,TABLE_NAME,TABLE_TYPE,UNIQUENESS,COMPRESSION,PREFIX_LENGTH,TABLESPACE_NAME,INITIAL_EXTENT,NEXT_EXTENT from user_indexes where TABLE_OWNER = 'TRY';


alter index try.idx_t1 rebuild;
索引再構築のみONLINE句を利用でき、索引再構築中の索引の更新が許可されている。
alter index try.idx_t1 rebuild online;


●オンライン再定義 ⇒ 流れを覚える。
変更後の定義で仮表を作り、DBMS_REDEFINITIONパッケージで再定義。
Step1 仮表create
create table try.t1_copy as select * from try.t1;

Step2 
exec DBMS_REDEFINITION.START_REDEF_TABLE ('TRY', 't1', 't1_copy');

Step3 後処理(テーブルのスワップ)
exec DBMS_REDEFINITION.FINISH_REDEF_TABLE ('TRY', 't1', 't1_copy');

Step4 仮表の削除


●圧縮と縮小
圧縮：表セグメントのサイズはそのまま。行移行と行遷移のレコードは減少 ⇒オンライン中にできるというメリット
解放：表セグメントのサイズは縮小　　。行移行と行遷移のレコードは減少

●圧縮
・基本表圧縮：ダイレクトロード時のみ圧縮、ブロック内の連続空き領域の最大化、デフォのPCTFREEが0になる。
create table try.comp_basic(id number) row store compress basic;

・拡張行圧縮：ダイレクトロード＋通常のDML、ブロック内の重複値値をポインタ化
create table try.comp_advanced(id number) row store compress advanced;

●セグメント遅延作成
create table defer_table (id number, constraint pk_defer primary key(id)) segment creation deferred;
ORA-14224: Deferred segment creation is not supported for this schema
⇒sysスキーマでは、セグメント遅延作成は不可能。segment creation immediateは可能。
  索引構成表(Index Only Table IOT)やクラスタ化された表も不可能。
　索引構成表は、索引とデータ部分が一緒になった表のこと。データ全体が最初から、BTreeインデクスに格納しているもの。
  表の作成時には、表領域の空きのチェックがされない。⇒されてたら、この機能のうまみなし。(不要の可能性のあるテーブルがたくさんあるアプリなど)


  cf.索引構成表と対比して、通常の表は、「ヒープ表とよばれる。」データの配置についてのしばりがない。
  IOT表のメリットとしては、以下2つ。
　・主キーによるレンジスキャン(ソート済みであり、テーブルスキャンがインデクススキャンに相当するため)
  ・データの圧縮率が高い(似たような値が隣同士になっているため。)

作成時の構文は以下
  create table xxx () organization index;

Step1 表を作ったばかりでは、データが挿入されていない。
select BLOCKS, EXTENTS, SEGMENT_NAME from user_segments;

Step2 表にデータを挿入すると、ブロックと
SQL> select BLOCKS, EXTENTS, SEGMENT_NAME from user_segments where SEGMENT_NAME LIKE '%DEFER%' ;
    BLOCKS    EXTENTS SEGMENT_NAME
----------------------------------------------------------------------------------------------------
        40          5 DEFER_TABLE
        56          7 PK_DEFER

Step3 さらに、索引をUNUSABLEとすると割り当てられていた索引のセグメントが削除される。
    BLOCKS    EXTENTS SEGMENT_NAME
----------------------------------------------------------------------------------------------------
        40          5 DEFER_TABLE

Step4 alter index PK_DEFER rebuildで復活⇒あれ？セグメントが最初より減っている??
    BLOCKS    EXTENTS SEGMENT_NAME
----------------------------------------------------------------------------------------------------
        40          5 DEFER_TABLE
        48          6 PK_DEFER

●再開可能領域割り当て機能
alter session enable resumable;
⇒ただし、resumable権限が必要
  grant resumable to try;


#8 
●一時UNDO
SQL> show parameter temp_undo
NAME              TYPE    VALUE
----------------- ------- -----
temp_undo_enabled boolean TRUE

⇒有効にするかどうかはインスタンスレベル、セッションレベルでの設定をすることができる。
alter system  set temp_undo_enabled = true;
alter session set temp_undo_enabled = true;

●FLASHBACK TABLE
flashback table t1_copy to before drop;
⇒undo保存領域を用いてユーザエラーを回避できるよ。

●UNDO表領域を複数作成できるが、同時にONLINEにできるUNDO表領域は1つのみ。⇒以下のパラメタで表示されるもののみ。
ほかのUNDO表領域を作成して、onlineにしてもエラーにはならなかった。

SQL> show parameter undo_tablesp
NAME            TYPE   VALUE
--------------- ------ --------
undo_tablespace string UNDOTBS1

●UNDO保存保証の有効化
SQL> alter tablespace UNDOTBS1 retention guarantee;

ロックしているセッションを探すSQL
SELECT SID, SERIAL# FROM V$SESSION WHERE SID IN ( SELECT SID FROM V$LOCK WHERE TYPE IN (‘TM’,’TX’)) 

#10
監査に関連するパラメタ
SQL> show parameter AUDIT
NAME                         TYPE    VALUE
---------------------------- ------- -----------------------------------
audit_file_dest              string  /u01/app/oracle/admin/orcl12c/adump
audit_sys_operations         boolean TRUE  ⇒ 監査ログのDBA監査が有効になっている。
audit_syslog_level           string
audit_trail                  string  DB
unified_audit_sga_queue_size integer 1048576

システム全体にわたるユーザー別の現在の文監査
select * from DBA_STMT_AUDIT_OPTS ;
システム全体にわたってユーザー別に監査されている現行の権限監査
select * from DBA_PRIV_AUDIT_OPTS ;

audit_trail　：　データベースの監査の有効化（NONE以外）、無効化（NONE）を制御する初期化パラメータ
   NONE：　標準監査使用禁止（デフォルト）
   OS　：　監査レコードをOSファイルへ書き込む
   DB　：　OSファイルへ常に書き込まれる監査レコードを除いてSYS.AUD$へ書き込む

●FGA監査の設定・確認
 BEGIN
	DBMS_FGA.ADD_POLICY(
		OBJECT_NAME => 'S_TABLE',
		POLICY_NAME => 'DANGER_OPE',
		AUDIT_COLUMN => 'NAME',
		AUDIT_CONDITION => 'NAME = ''ADMIN'' ',     -- ADMIN を監査
		STATEMENT_TYPES => 'INSERT,UPDATE,DELETE'
	);
 END;
 /
 SELECT DB_USER || ':' || SQL_TEXT FGA_LOG  FROM DBA_FGA_AUDIT_TRAIL WHERE TIMESTAMP >= SYSDATE - INTERVAL '1' MINUTE;


●統合監査

・キュー書き込みモードの確認
select PARAMETER_VALUE from dba_audit_mgmt_config_params where PARAMETER_NAME = 'AUDIT WRITE MODE';
PARAMETER_VALUE
----------------------------------------------------------------------------------------------------
QUEUED WRITE MODE

・監査キューのフラッシュ
exec dbms_audit_mgmt.flush_unified_audit_trail;

統合監査においてキュー書き込みモードを廃止する。⇒即座にDBに書き込む
BEGIN 
  DBMS_AUDIT_MGMT.SET_AUDIT_TRAIL_PROPERTY(
    DBMS_AUDIT_MGMT.AUDIT_TRAIL_UNIFIED,
    DBMS_AUDIT_MGMT.AUDIT_TRAIL_WRITE_MODE,
    DBMS_AUDIT_MGMT.AUDIT_TRAIL_IMMEDIATE_WRITE
  );
END;
/

キュー書き込みモードにしたいなら、
BEGIN
  DBMS_AUDIT_MGMT.SET_AUDIT_TRAIL_PROPERTY(
    DBMS_AUDIT_MGMT.AUDIT_TRAIL_UNIFIED,
    DBMS_AUDIT_MGMT.AUDIT_TRAIL_WRITE_MODE,
    DBMS_AUDIT_MGMT.AUDIT_TRAIL_QUEUED_WRITE
  );
END;
/

●FGA監査
⇒定義次第かもしれないが、SYSスキーマの持つオブジェクトに対する監査ポリシの追加は無効
 BEGIN
        DBMS_FGA.ADD_POLICY(
                OBJECT_NAME => 'SAMPLE_TABLE',
                POLICY_NAME => 'CHECK_DANGER',
                AUDIT_COLUMN => 'NAME',
                AUDIT_CONDITION => 'NAME = ''ADMIN'' ',     -- ADMIN を監査
                STATEMENT_TYPES => 'INSERT,UPDATE,DELETE'
        );
 END;
ORA-28103: adding a policy to an object owned by SYS is not allowed


●統合監査を有効化するための方法
make -f ins_rdbms.mk uniaud_on ioracle ORACLE_HOME=$ORACLE_HOME

#11 backup
●インスタンスリカバリ
SQL> show parameter mttr ⇒ インスタンスリカバリの調整パラメタ
NAME                   TYPE    VALUE
---------------------- ------- -----
fast_start_mttr_target integer 0

以下にインスタンスリカバリが7200秒以内に収まるように当該パラメタを設定する手順を示す。
SQL> alter session set container = cdb$root;
Session altered.
SQL>  alter system set fast_start_mttr_target = 7200;
System SET altered.


●管理者が意図的にチェックポイントを発生
alter system checkpoint;
また、表領域のオフライン、DBの停止などでもチェックポイントは発生する。

●
SQL> show parameter recovery
NAME                       TYPE        VALUE                               
-------------------------- ----------- ------------------------------------------
db_recovery_file_dest      string      /u01/app/oracle/fast_recovery_area/orcl12c
db_recovery_file_dest_size big integer 5G
recovery_parallelism       integer     0
remote_recovery_file_dest  string

[oracle@localhost oracle_shell]$ find /u01/ -name control0*.ctl
/u01/app/oracle/fast_recovery_area/orcl12c/control02.ctl  ⇒バックアップ(高速リカバリ領域に作成されたもの)
/u01/app/oracle/oradata/orcl12c/control01.ctl             ⇒本体




